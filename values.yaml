fullnameOverride: "auth"

nameOverride: ""

replicas: 1

image:
  repository: "quay.io/keycloak/keycloak"
  tag: "12.0.4"
  pullPolicy: Always

imagePullSecrets: []

hostAliases: []

enableServiceLinks: true

podManagementPolicy: Parallel

restartPolicy: Always

serviceAccount:
  create: true
  name: ""
  annotations: {}
  labels: {}
  imagePullSecrets: []

rbac:
  create: true
  rules:
    - apiGroups:
        - ""
      resources:
        - pods
      verbs:
        - get
        - list

podSecurityContext:
  fsGroup: 1000

securityContext:
  runAsUser: 1000
  runAsNonRoot: true

extraInitContainers: ""

extraContainers: ""

lifecycleHooks: |
#  postStart:
#    exec:
#      command:
#        - /bin/sh
#        - -c
#        - ls

terminationGracePeriodSeconds: 60

clusterDomain: cluster.local

command: []

args: []

extraEnv: |
  - name: KEYCLOAK_STATISTICS
    value: all
  - name: TZ
    value: "Europe/Paris"
  - name: PROXY_ADDRESS_FORWARDING
    value: "true"
  - name: KEYCLOAK_USER
    value: "admin"
  - name: KEYCLOAK_PASSWORD
    value: "password"
  - name: DB_VENDOR
    value: "POSTGRES"
  - name: DB_ADDR
    value: "keycloak-postgresql"
  - name: DB_PORT
    value: "5432"
  - name: DB_DATABASE
    value: ""
  - name: DB_USER
    value: "admin"
  - name: DB_PASSWORD
    value: "password"
  - name: JDBC_PARAMS
    value: "useSSL=false&allowPublicKeyRetrieval=true&connectTimeout=240&autoReconnect=true&useUnicode=yes&characterEncoding=UTF-8&serverTimezone=Europe/Paris"
  - name: KUBERNETES_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
  - name: POD_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.name
  - name: JGROUPS_DISCOVERY_PROTOCOL
    value: kubernetes.KUBE_PING
  - name: JGROUPS_DISCOVERY_PROPERTIES
    value: "port_range=0,namespace=$(KUBERNETES_NAMESPACE)"
  - name: JAVA_OPTS
    value: >-
      -server
      -Djava.net.preferIPv4Stack=true
      -Djava.awt.headless=true
      -Djboss.default.jgroups.stack=kubernetes
      -Djboss.node.name=$(POD_NAME)
      -Djboss.tx.node.id=$(POD_NAME)
      -Djboss.site.name=$(KUBERNETES_NAMESPACE) 
      -Dkeycloak.profile.feature.scripts=enabled
      -Dkeycloak.profile.feature.upload_scripts=enabled
      -Djboss.as.management.blocking.timeout=3600
      -Xms64m
      -Xmx512m
      -XX:MetaspaceSize=96M
      -XX:MaxMetaspaceSize=256m
      -Djboss.modules.system.pkgs=org.jboss.byteman

extraEnvFrom: ""

priorityClassName: ""

affinity: ""

nodeSelector: {}

tolerations: []

podLabels: {}

podAnnotations: {}

livenessProbe: |
  httpGet:
    path: /auth/
    port: http
  initialDelaySeconds: 300
  timeoutSeconds: 60

readinessProbe: |
  httpGet:
    path: /auth/realms/master
    port: http
  initialDelaySeconds: 300
  timeoutSeconds: 60

startupProbe: |
  httpGet:
    path: /auth/
    port: http
  initialDelaySeconds: 360
  timeoutSeconds: 1
  failureThreshold: 60
  periodSeconds: 5

resources: 
  requests:
    memory: "512Mi"
    cpu: "500m"
  limits:
    memory: "2048Mi"
    cpu: "1000m"

startupScripts:
  keycloak.cli: |
    {{- .Files.Get "scripts/keycloak.cli" }}

extraVolumes: ""

extraVolumeMounts: ""

extraPorts: []

podDisruptionBudget: {}

statefulsetAnnotations: {}

statefulsetLabels: {}

secrets: {}

service:
  annotations: {}
  labels: {}
  type: ClusterIP
  loadBalancerIP: ""
  httpPort: 80
  httpNodePort: null
  httpsPort: 8443
  httpsNodePort: null
  httpManagementPort: 9990
  httpManagementNodePort: null
  extraPorts: []
  loadBalancerSourceRanges: []
  sessionAffinity: ""
  sessionAffinityConfig: {}

ingress:
  enabled: true
  servicePort: http
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "360"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "360"
      
  labels: {}
  rules:
    -
      host: "auth.keycloak.com"
      paths:
        - path: /
          pathType: Prefix
  tls:
    - hosts:
        - "auth.keycloak.com"
      secretName: "keycloak-com-tls"
  console:
    enabled: false
    annotations: 
      ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
      nginx.ingress.kubernetes.io/auth-tls-secret: "kc-auth-keycloak-com/internal-ca"
      nginx.ingress.kubernetes.io/auth-tls-error-page: "https://auth.keycloak.com/auth/error-cert.html"
      nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
      nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"
    rules:
      -
        host: 'console-auth.keycloak.com'
        paths:
          - path: /auth/admin/
            pathType: Prefix

networkPolicy:
  enabled: false
  labels: {}
  extraFrom: []

route:
  enabled: false
  path: /
  annotations: {}
  labels: {}
  host: ""
  tls:
    enabled: true
    insecureEdgeTerminationPolicy: Redirect
    termination: edge

pgchecker:
  image:
    repository: docker.io/busybox
    tag: 1.32
    pullPolicy: IfNotPresent
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  resources:
    requests:
      memory: "64Mi"
      cpu: "250m"
    limits:
      memory: "128Mi"
      cpu: "500m"
      
postgresql:
  enabled: true
  postgresqlUsername: admin
  postgresqlPassword: password
  postgresqlDatabase: 
  networkPolicy:
    enabled: false
      
serviceMonitor:
  enabled: false
  namespace: ""
  namespaceSelector: {}
  annotations: {}
  labels: {}
  interval: 10s
  scrapeTimeout: 10s
  path: /metrics
  port: http-management

extraServiceMonitor:
  enabled: false
  namespace: ""
  namespaceSelector: {}
  annotations: {}
  labels: {}
  interval: 10s
  scrapeTimeout: 10s
  path: /auth/realms/master/metrics
  port: http

prometheusRule:
  enabled: false
  annotations: {}
  labels: {}
  rules: []

autoscaling:
  enabled: false
  labels: {}
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 300

test:
  enabled: false
  image:
    repository: docker.io/unguiculus/docker-python3-phantomjs-selenium
    tag: v1
    pullPolicy: IfNotPresent
  podSecurityContext:
    fsGroup: 
  securityContext:
    runAsUser: 
    runAsNonRoot: true
